# -*- coding: utf-8 -*-
"""Projeto-Mayrton(final).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-t01FPET3-mBN01c82uiBmCwE1R4TUNt
"""

import pandas as pd

df = pd.read_csv('data.csv')

df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

df = df.drop(columns=['Unnamed: 32'], errors='ignore')

df = df.drop(columns=['id'], errors='ignore')

# Exibir novamente as colunas após a remoção das indesejadas
print("\nNomes das colunas após remoção:")
print(df.columns)

# Estatísticas descritivas
print(df.describe())

# Frequências para o diagnóstico (M e B)
print(df['diagnosis'].value_counts())

import matplotlib.pyplot as plt
import seaborn as sns


if 'id' in df.columns:
    df = df.drop(columns='id')


df.hist(figsize=(15, 15))
plt.tight_layout()
plt.show()

# Matriz de correlação

# Calcular a matriz de correlação
corr_matrix = df.corr()

# Resto do código para o heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, linecolor='black',
            annot_kws={"size": 8, "ha": "center"}, cbar_kws={'shrink': 0.8})
plt.title('Matriz de Correlação entre as Features', fontsize=16)

plt.tight_layout()
plt.show()

# Boxplot para ver a distribuição de 'radius_mean' por diagnóstico
plt.figure(figsize=(8, 6))
sns.boxplot(x='diagnosis', y='radius_mean', data=df, palette='coolwarm', hue='diagnosis')
plt.title('Boxplot - Radius Mean por Diagnóstico')
plt.legend(title='Diagnóstico', loc='upper right')
plt.show()

# Gráfico de dispersão para 'radius_mean' e 'area_mean'
plt.figure(figsize=(8, 6))
sns.scatterplot(x='radius_mean', y='area_mean', hue='diagnosis', data=df, palette='coolwarm')
plt.title('Gráfico de Dispersão: Radius Mean vs Area Mean')
plt.show()

# Gráfico de contagem para as classes 'diagnosis'
plt.figure(figsize=(8, 6))
sns.countplot(x='diagnosis', data=df)
plt.title('Distribuição das Classes - Diagnóstico')
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split

# Defina X (características) e y (rótulo)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Dividir os dados com estratificação para garantir que ambas as classes estejam no conjunto de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Modelo de Regressão Logística
model_lr = LogisticRegression(max_iter=5000)
model_lr.fit(X_train, y_train)
y_pred_lr = model_lr.predict(X_test)

# Avaliar o modelo
accuracy = accuracy_score(y_test, y_pred_lr)
report = classification_report(y_test, y_pred_lr, output_dict=True)

# Exibindo os resultados do modelo
results = {
    'Model': 'Logistic Regression',
    'Accuracy': accuracy,
    'Precision (Malignant)': report['1']['precision'],
    'Recall (Malignant)': report['1']['recall'],
    'F1-Score (Malignant)': report['1']['f1-score'],
    'Precision (Benign)': report['0']['precision'],
    'Recall (Benign)': report['0']['recall'],
    'F1-Score (Benign)': report['0']['f1-score'],
    'Support (Malignant)': report['1']['support'],
    'Support (Benign)': report['0']['support'],
}

# Converter resultados para DataFrame
results_df = pd.DataFrame([results])

# Exibindo a tabela com formatação aprimorada
styled_results = results_df.style \
    .format("{:.2f}", subset=['Accuracy', 'Precision (Malignant)', 'Recall (Malignant)', 'F1-Score (Malignant)',
                             'Precision (Benign)', 'Recall (Benign)', 'F1-Score (Benign)', 'Support (Malignant)', 'Support (Benign)']) \
    .set_table_styles([{'selector': 'th', 'props': [('text-align', 'center'), ('font-weight', 'bold'), ('background-color', '#4CAF50'), ('color', 'white')]},  # Títulos em negrito e com fundo verde
                       {'selector': 'td', 'props': [('text-align', 'right'), ('border', '1px solid black')]},  # Alinhar valores à direita e borda fina
                       {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},  # A tabela ocupa toda a largura e sem espaçamento entre bordas
                       {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},  # Linhas alternadas com fundo cinza
                       {'selector': 'tr:nth-child(odd)', 'props': [('background-color', '#ffffff')]},  # Linhas ímpares com fundo branco
                      ])

# Exibir a tabela estilizada e formatada
styled_results

from sklearn.ensemble import RandomForestClassifier


# Modelo de Random Forest
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred_rf = model_rf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred_rf)
report = classification_report(y_test, y_pred_rf, output_dict=True)


results = {
    'Model': 'Random Forest',
    'Accuracy': accuracy,
    'Precision (Malignant)': report['1']['precision'],
    'Recall (Malignant)': report['1']['recall'],
    'F1-Score (Malignant)': report['1']['f1-score'],
    'Precision (Benign)': report['0']['precision'],
    'Recall (Benign)': report['0']['recall'],
    'F1-Score (Benign)': report['0']['f1-score'],
    'Support (Malignant)': report['1']['support'],
    'Support (Benign)': report['0']['support'],
}


results_df = pd.DataFrame([results])


styled_results = results_df.style \
    .format("{:.2f}", subset=['Accuracy', 'Precision (Malignant)', 'Recall (Malignant)', 'F1-Score (Malignant)',
                             'Precision (Benign)', 'Recall (Benign)', 'F1-Score (Benign)', 'Support (Malignant)', 'Support (Benign)']) \
    .set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center'), ('font-weight', 'bold'), ('background-color', '#4CAF50'), ('color', 'white')]},  # Títulos em negrito e com fundo verde
        {'selector': 'td', 'props': [('text-align', 'right'), ('border', '1px solid black')]},  # Alinhar valores à direita e borda fina
        {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},  # A tabela ocupa toda a largura e sem espaçamento entre bordas
        {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},  # Linhas alternadas com fundo cinza
        {'selector': 'tr:nth-child(odd)', 'props': [('background-color', '#ffffff')]},  # Linhas ímpares com fundo branco
    ])

styled_results

from sklearn.svm import SVC


# Modelo SVC
model_svm = SVC()
model_svm.fit(X_train, y_train)
y_pred_svm = model_svm.predict(X_test)


accuracy = accuracy_score(y_test, y_pred_svm)
report = classification_report(y_test, y_pred_svm, output_dict=True)


results = {
    'Model': 'SVC',
    'Accuracy': accuracy,
    'Precision (Malignant)': report['1']['precision'],
    'Recall (Malignant)': report['1']['recall'],
    'F1-Score (Malignant)': report['1']['f1-score'],
    'Precision (Benign)': report['0']['precision'],
    'Recall (Benign)': report['0']['recall'],
    'F1-Score (Benign)': report['0']['f1-score'],
    'Support (Malignant)': report['1']['support'],
    'Support (Benign)': report['0']['support'],
}


results_df = pd.DataFrame([results])


styled_results = results_df.style \
    .format("{:.2f}", subset=['Accuracy', 'Precision (Malignant)', 'Recall (Malignant)', 'F1-Score (Malignant)',
                             'Precision (Benign)', 'Recall (Benign)', 'F1-Score (Benign)', 'Support (Malignant)', 'Support (Benign)']) \
    .set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center'), ('font-weight', 'bold'), ('background-color', '#4CAF50'), ('color', 'white')]},  # Títulos em negrito e com fundo verde
        {'selector': 'td', 'props': [('text-align', 'right'), ('border', '1px solid black')]},  # Alinhar valores à direita e borda fina
        {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},  # A tabela ocupa toda a largura e sem espaçamento entre bordas
        {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},  # Linhas alternadas com fundo cinza
        {'selector': 'tr:nth-child(odd)', 'props': [('background-color', '#ffffff')]},  # Linhas ímpares com fundo branco
    ])


styled_results

from sklearn.neighbors import KNeighborsClassifier


# modelo K-Nearest Neighbors
model_knn = KNeighborsClassifier()
model_knn.fit(X_train, y_train)

# Previsões
y_pred_knn = model_knn.predict(X_test)

# Avaliação do modelo
accuracy = accuracy_score(y_test, y_pred_knn)
report = classification_report(y_test, y_pred_knn, output_dict=True)


results = {
    'Model': 'K-Nearest Neighbors',
    'Accuracy': accuracy,
    'Precision (Malignant)': report['1']['precision'],
    'Recall (Malignant)': report['1']['recall'],
    'F1-Score (Malignant)': report['1']['f1-score'],
    'Precision (Benign)': report['0']['precision'],
    'Recall (Benign)': report['0']['recall'],
    'F1-Score (Benign)': report['0']['f1-score'],
    'Support (Malignant)': report['1']['support'],
    'Support (Benign)': report['0']['support'],
}


results_df = pd.DataFrame([results])


styled_results = results_df.style \
    .format("{:.2f}", subset=['Accuracy', 'Precision (Malignant)', 'Recall (Malignant)', 'F1-Score (Malignant)',
                             'Precision (Benign)', 'Recall (Benign)', 'F1-Score (Benign)', 'Support (Malignant)', 'Support (Benign)']) \
    .set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center'), ('font-weight', 'bold'), ('background-color', '#4CAF50'), ('color', 'white')]},  # Títulos em negrito e com fundo verde
        {'selector': 'td', 'props': [('text-align', 'right'), ('border', '1px solid black')]},  # Alinhar valores à direita e borda fina
        {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},  # A tabela ocupa toda a largura e sem espaçamento entre bordas
        {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},  # Linhas alternadas com fundo cinza
        {'selector': 'tr:nth-child(odd)', 'props': [('background-color', '#ffffff')]},  # Linhas ímpares com fundo branco
    ])

styled_results

# Função para calcular e armazenar as métricas
def store_results(model_name, y_test, y_pred):
    # Calcular métricas
    report = classification_report(y_test, y_pred, output_dict=True)
    accuracy = accuracy_score(y_test, y_pred)

    # Extrair as métricas do relatório
    results = {
        'Model': model_name,
        'Accuracy': accuracy,
        'Precision (Malignant)': report['1']['precision'],
        'Recall (Malignant)': report['1']['recall'],
        'F1-Score (Malignant)': report['1']['f1-score'],
        'Precision (Benign)': report['0']['precision'],
        'Recall (Benign)': report['0']['recall'],
        'F1-Score (Benign)': report['0']['f1-score'],
        'Support (Malignant)': report['1']['support'],
        'Support (Benign)': report['0']['support'],
    }
    return results


models = [
    ('Logistic Regression', LogisticRegression(max_iter=5000)),
    ('Random Forest', RandomForestClassifier(n_estimators=100, random_state=42)),
    ('SVC', SVC()),
    ('K-Nearest Neighbors', KNeighborsClassifier())
]


results = []

# Iterando sobre os modelos para treinar, fazer previsões e armazenar resultados
for model_name, model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    results.append(store_results(model_name, y_test, y_pred))

# Converter os resultados para DataFrame
results_df = pd.DataFrame(results)


styled_results = results_df.style \
    .format("{:.2f}", subset=['Accuracy', 'Precision (Malignant)', 'Recall (Malignant)', 'F1-Score (Malignant)',
                             'Precision (Benign)', 'Recall (Benign)', 'F1-Score (Benign)', 'Support (Malignant)', 'Support (Benign)']) \
    .set_table_styles([{'selector': 'th', 'props': [('text-align', 'center'), ('font-weight', 'bold'), ('background-color', '#4CAF50'), ('color', 'white')]},  # Títulos em negrito e com fundo verde
                       {'selector': 'td', 'props': [('text-align', 'right'), ('border', '1px solid black')]},  # Alinhar valores à direita e borda fina
                       {'selector': 'table', 'props': [('width', '100%'), ('border-collapse', 'collapse')]},  # A tabela ocupa toda a largura e sem espaçamento entre bordas
                       {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},  # Linhas alternadas com fundo cinza
                       {'selector': 'tr:nth-child(odd)', 'props': [('background-color', '#ffffff')]},  # Linhas ímpares com fundo branco
                      ])


styled_results

# Identificando o melhor modelo com base na acurácia
best_model = results_df.loc[results_df['Accuracy'].idxmax()]
print(f"\nO melhor modelo foi: {best_model['Model']} com uma acurácia de {best_model['Accuracy']:.2f}")